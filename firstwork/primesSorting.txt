import Foundation
import Glibc
 
//找出1-10000之间的质数
var primeNumbers = [Int]()
for i in 2...10000 {
    var isPrimeNumber = true
    for j in 2..<i {
        if i % j == 0 {
            isPrimeNumber = false
        }
    }
    if isPrimeNumber == true {
        primeNumbers.append(i)
    }
}

print("method 1")
//排序――正向――方法一
let ascResult1 = primeNumbers.sorted()
print(ascResult1)

//排序――反向――方法一
let descResult1 = primeNumbers.sorted() {$0>$1}
print(descResult1)

print("method 2")
//排序――正向――方法二
let ascResult2 = primeNumbers.sorted(by: <)
print(ascResult2)

//排序――反向――方法二
let descResult2 = primeNumbers.sorted(by: >)
print(descResult2)

print("method 3")
//排序――正向――方法三
let ascResult3 = primeNumbers.sorted(by: {$0 < $1})
print(ascResult3)

//排序――反向――方法三
let descResult3 = primeNumbers.sorted(by: {$0 > $1})
print(descResult3)

print("method 4")
//排序――正向――方法四
func ascending  (x:Int,y:Int) -> Bool {
    return x < y
}
let ascResult4 = primeNumbers.sorted(by: ascending)
print(ascResult4)

//排序――反向――方法四
func descending  (x:Int,y:Int) -> Bool {
    return x > y
}
let descResult4 = primeNumbers.sorted(by: descending)
print(descResult4)

print("method 5")
//排序――正向――方法五
let ascResult5 = primeNumbers.sorted(by: {
    (x:Int,y:Int) -> Bool in
    return x < y
})
print(ascResult5)

//排序――反向――方法五
let descResult5 = primeNumbers.sorted(by: {
    (x:Int,y:Int) -> Bool in
    return x > y
})
print(descResult5)